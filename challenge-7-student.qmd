---
title: "Challenge 7: Incorporating Multiple Inputs"
subtitle: "Functions + Fish"
author: "Yanna Shirokova"
date: "November 9, 2024"
editor: source
embed-resources: true
execute:
  error: false
  message: false
  echo: true
format: 
  html:
    code-fold: true
    code-tools: true
    theme: cosmo
    toc: true
---


```{r}
#| label: setup
#| message: false
#| warning: false
#| echo: true

library(tidyverse)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(rlang)
fish <- read_csv(here::here("data", "BlackfootFish.csv"))
```

## Condition Index

A frequently used measurement for fish health is a condition index [(Wikipedia article)](https://en.wikipedia.org/wiki/Condition_index_in_fish). The following
simple equation can be used to calculate the approximate condition index of a
fish:

$$\text{condition index} = \frac{weight}{length^3} \times 100$$

**1. There are specific units required for the calculation of a condition index -- length must be in centimeters and weight must be in grams. The weight data for the Blackfoot River fish were collected in grams; the length data were collected in millimeters. Transform the length data to the correct units.**

```{r}
#| label: transform-data-to-have-correct-units
#| echo: true
#| warning: false
#| message: false

fish <- fish |>
  mutate(length = length / 10)

```

**2. Collecting data of this sort can be very messy! Write a function that will replace unlikely `length` and `weight` measurements with `NA`. Your function should accept at least three inputs:**

+ **a vector of measurements,**
+ **the minimum reasonable value,**
+ **the maximum reasonable value.**

**If a value falls outside these bounds, you should replace it with an `NA`.**

::: callout-tip
If you are struggling with the structure of your function, I would suggest reading the [Mutating Function](https://r4ds.hadley.nz/functions.html#mutate-functions) from R4DS.
:::

```{r}
#| label: function-to-change-impossible-measurements-to-NA
#| echo: true
#| warning: false
#| message: false

# https://chatgpt.com/share/672ff303-7744-8006-88bc-92fa70ab36f0
# Change to na

# Growing: It looks like you are checking multiple conditions in your [ ]. 
# Perhaps case_when() is a better tool for the job?
# Where are your function checks? What types of inputs does your function expect?

# Reflection: I changed my function so it's using case_when since I was 
# checking multiple conditions. This makes it easier to read and the code 
# more clear. I also added the stopifnot() to check that my input types are
# of the type I expect them to be. This is really important because if I get 
# passed the wrong types, my function would not work as expected/ error.  

# old
clean_measurements <- function(vec, min_value, max_value) {
  vec[vec < min_value | vec > max_value] <- NA
  return(vec)
}


# fixed
clean_measurements <- function(vec, min_value, max_value) {
  stopifnot(is.numeric(vec), 
            is.numeric(min_value), 
            is.numeric(max_value), 
            min_value <= max_value)
  
  vec <- case_when(
    vec < min_value ~ NA,
    vec > max_value ~ NA,
    TRUE ~ vec
  )
  return(vec)
}


```

**3. After consulting the [Montana Record Table](https://fwp.mt.gov/fish/anglingData/records) for the four species of trout included in these data, I have conjectured that it is unlikely to have measurements for fish below 5 cm and above 80 cm in length or below 10 g and above 4,000 g in weight. Use your function to modify the `length` and `weight` columns of the `fish` dataset based on my cutoffs.**

```{r}
#| label: modify-impossible-values-of-length-weight
#| echo: true
#| warning: false
#| message: false

fish <- fish |>
  mutate(length = clean_measurements(length, 5, 80),
         weight = clean_measurements(weight, 10, 4000))

```

**3. Write a function to calculate the condition index of a fish, given inputs of weight and length.**

::: callout-warning
Consider whether you will write a function that works with vectors (accepting
vectors as inputs) or a function that works with data frames (accepting a 
dataset and variable names as inputs)!
:::

```{r}
#| label: condition-function
#| echo: true
#| warning: false
#| message: false


condition <- function(df, weight, length) {
  df |>
    mutate(condition_index = (({{ weight }} / ({{ length }}^3)) * 100))
}

fish <- condition(fish, weight, length)

```

**4. Make a thoughtful visualization of how fish conditions have varied over the duration of this study.**

::: callout-warning
### To be thoughtful...

... you need to use at least a third variable!
:::

```{r}
#| label: condition-indices-over-time
#| echo: true
#| warning: false
#| message: false

fish |> 
  group_by(species, year, section) |> 
  summarize(avg_condition_index = mean(condition_index, na.rm = TRUE), .groups = "drop") |>
  ggplot(aes(x = year, y = avg_condition_index, color = species)) +
  geom_line(size = 1) + 
  scale_color_brewer(palette = "Set2") +
  labs(
    title = "Tracking Health of Trout Species in Johnsrud vs ScottyBrown 
    Sections of the Blackfoot River, Montana",
    x = "Year",
    subtitle = "Condition Index",
    y = "",
    color = "Species"
  ) +
  facet_wrap(~ section) +
  theme_minimal()

```
